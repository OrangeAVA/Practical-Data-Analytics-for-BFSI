{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\ftech\fcharset77 Symbol;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fswiss\fcharset0 Helvetica;\f4\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red18\green103\blue178;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c4786\c48764\c74999;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li960\fi-480\sl368\sa266\qj\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\'e1
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f2\b\fs32 Importing necessary libraries
\f3\b0\fs29\fsmilli14667 \
\pard\pardeftab720\sl337\sa266\qj\partightenfactor0

\f4 \cf4 import \cf2 pandas as pd
\f3 \

\f4 \cf4 from \cf2 sklearn.model_selection \cf4 import \cf2 train_test_split
\f3 \

\f4 \cf4 from \cf2 sklearn.ensemble \cf4 import \cf2 RandomForestClassifier
\f3 \

\f4 \cf4 from \cf2 sklearn.metrics \cf4 import \cf2 classification_report
\f3 \
\pard\pardeftab720\li960\fi-480\sl368\sa266\qj\partightenfactor0

\f0\fs32 \cf2 \'e1
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f2\b\fs32 Loading the dataset
\f3\b0\fs29\fsmilli14667 \
\pard\pardeftab720\sl337\sa266\qj\partightenfactor0

\f4 \cf2 data = \cf4 pd.read_csv\cf2 ('MF_data.csv')
\f3 \
If the data-set is not in the active directory, place the complete file path before the file name.\
\pard\pardeftab720\li960\fi-480\sl368\sa266\qj\partightenfactor0

\f0\fs32 \cf2 \'e1
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0 
\f2\b\fs32 Split the data into training and testing sets
\f3\b0\fs29\fsmilli14667 \
\pard\pardeftab720\sl337\sa266\qj\partightenfactor0

\f4 \cf2 X = \cf4 data.drop\cf2 ('MF_Status', axis=1)
\f3 \

\f4 Y = data['MF_Status']
\f3 \

\f4 x_train, x_test, y_train, y_test = \cf4 train_test_split\cf2 (X, Y, test_size=0.3, random_state=33)
\f3 \
\pard\pardeftab720\li960\fi-480\sl337\sa266\qj\partightenfactor0

\f0 \cf2 \'e1
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs29\fsmilli14667 Training Random Forest Model 
\f3\b0 \
\pard\pardeftab720\sl337\sa266\qj\partightenfactor0

\f4 \cf2 Model_RF = \cf4 RandomForestClassifier\cf2 (n_estimators=100, random_state=33)
\f3 \

\f4 Model_RF(x_train, y_train)
\f3 \
\pard\pardeftab720\li960\fi-480\sl337\sa266\qj\partightenfactor0

\f0 \cf2 \'e1
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs29\fsmilli14667 Prediction of Mutual Fund using the test data set
\f3\b0 \
\pard\pardeftab720\sl337\sa266\qj\partightenfactor0

\f4 \cf2 y_pred = Model_RF.predict(x_test)
\f3 \
\pard\pardeftab720\li960\fi-480\sl337\sa266\qj\partightenfactor0

\f0 \cf2 \'e1
\f1\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs29\fsmilli14667 Evaluating Model Accuracy and Classification Report
\f3\b0 \
\pard\pardeftab720\sl337\sa266\qj\partightenfactor0

\f4 \cf2 RF_Accuracy = \cf4 accuracy_score\cf2 (y_test, y_pred)
\f3 \

\f4 print(RF_Accuracy)
\f3 \

\f4 Performance_Report = \cf4 classification_report\cf2 (Y_test, predicted)
\f3 \

\f4 print(Performance_Report)
\f3 \
The final outputs will provide the model performance in terms of accuracy, precision, recall, and f1-score.\
}